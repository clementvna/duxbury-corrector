package com.clementvillanueva.duxburycorrector.models;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * @author Clément Villanueva
 * @version 1.0.0
 */

public class Corrector {

    /**
     * HashMap of String key and String value representing a type and its regular expression
     */
    private static final Map<String, String> REGEX_COLLECTION;
    static {
        Map<String, String> map = new HashMap<>();
        map.put(MessageGenerator.SYNTAX_HOUR12_MISTAKE_KEY,
                "(`1[012]|[1-9])(\\s[h:]\\s)`[0-5][0-9](\\\\s)?(?i)(am|pm)");
        map.put(MessageGenerator.SYNTAX_HOUR24_MISTAKE_KEY,
                "(`[01]?[0-9]|2[0-3])\\s[h:]\\s`[0-5][0-9]");
        map.put(MessageGenerator.SYNTAX_DATE_MISTAKE_KEY,
                "\\`\\d{1,2}['\\/]\\d{1,2}['\\/]\\d{4}$");
        map.put(MessageGenerator.SYNTAX_EMAIL_MISTAKE_KEY,
                "^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$");
        map.put(MessageGenerator.SYNTAX_PHONE_MISTAKE_KEY,
                "^((\\+|00)33\\s?|0)[1-5]([\\s\\.]?\\d{2}){4}$");
        map.put(MessageGenerator.SYNTAX_MOBILE_MISTAKE_KEY,
                "^((\\+|00)33\\s?|0)[679]([\\s\\.]?\\d{2}){4}$");
        map.put(MessageGenerator.SYNTAX_EURO_MISTAKE_KEY,
                "^`\\d+(\\,\\d{3})\\s€$");
        map.put(MessageGenerator.SYNTAX_DOLLAR_MISTAKE_KEY,
                "^\\$\\s`(([1-9]\\d{0,2}('\\d{3})*)|(([1-9]\\d*)?\\d))(\\.\\d\\d)?$");
        map.put(MessageGenerator.SYNTAX_MEASUREMENT_MISTAKE_KEY,
                "^`\\d+(\\,(`\\d))\\s2[a-zA-Z]$");
        REGEX_COLLECTION = Collections.unmodifiableMap(map);
    }

    /**
     * The file to be processed
     */
    private final File mFile;

    /**
     * Corrector constructor
     * @param file to be processed
     * @throws NullPointerException if file does not exist
     */
    public Corrector(File file) throws NullPointerException {
        if (!file.exists())
            throw new NullPointerException("File does not exist.");
        mFile = file;
    }

    /**
     * Looks for syntax errors using REGEX_COLLECTION
     * @return an ArrayList of String which represents all the messages generated by the MessageGenerator
     */
    public ArrayList<String> syntax() {
        ArrayList<String> list = new ArrayList<>();
        try {
            LineNumberReader currentLineReader = new LineNumberReader(new FileReader(mFile));
            BufferedReader nextLineReader = new BufferedReader(new FileReader(mFile));
            nextLineReader.readLine();
            for (String currentLine; (currentLine = currentLineReader.readLine()) != null;) {
                String nextLine = nextLineReader.readLine();
                if (currentLine.endsWith("-")) {
                    String line = currentLine.substring(0, currentLine.length() - 1) + nextLine;
                    for (Map.Entry entry : REGEX_COLLECTION.entrySet()) {
                        Matcher matcher = Pattern.compile((String) entry.getValue()).matcher(line);
                        if (matcher.find())
                            list.add(MessageGenerator.generate(currentLineReader.getLineNumber(), matcher.group(),
                                    (String) entry.getKey()));
                    }
                }
            }
            nextLineReader.close();
            currentLineReader.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
        return list;
    }

    /**
     * Looks for word contraction errors using the 'contracted' table in the database
     * @return an ArrayList of String which represents all the messages generated by the MessageGenerator
     */
    public ArrayList<String> contracted() {
        ArrayList<String> list = new ArrayList<>();
        try {
            LineNumberReader reader = new LineNumberReader(new FileReader(mFile));
            ArrayList<StringPair> content = DatabaseHandler.getContent(DatabaseHandler.CONTRACTED_TABLE_ID);
            for (String line; (line = reader.readLine()) != null; ) {
                line = line.replaceAll("„", "");
                for (String word : line.split("\\s"))
                    list.addAll(content.stream().filter(item -> word.equals(item.getFirst()))
                            .map(item -> MessageGenerator.generate(reader.getLineNumber(), word, item.getSecond(),
                                    MessageGenerator.WORD_INTEGRAL_MISTAKE_KEY)).collect(Collectors.toList()));
            }
            reader.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            list = null;
        }
        return list;
    }

    /**
     * Looks for integral word errors using the 'integral' table in the database
     * @return an ArrayList of String which represents all the messages generated by the MessageGenerator
     */
    public ArrayList<String> integral() {
        ArrayList<String> list = new ArrayList<>();
        try {
            LineNumberReader reader = new LineNumberReader(new FileReader(mFile));
            ArrayList<StringPair> content = DatabaseHandler.getContent(DatabaseHandler.INTEGRAL_TABLE_ID);
            for (String line; (line = reader.readLine()) != null; ) {
                line = line.replaceAll("„", "");
                for (String word : line.split("\\s"))
                    list.addAll(content.stream().filter(item -> word.equals(item.getFirst()))
                        .map(item -> MessageGenerator.generate(reader.getLineNumber(), item.getFirst(),
                                item.getSecond(), MessageGenerator.WORD_ABREGE_MISTAKE_KEY))
                            .collect(Collectors.toList()));
            }
            reader.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            list = null;
        }
        return list;
    }

    /**
     * Looks for syntax errors using the 'syllable' table in the database
     * @return an ArrayList of String which represents all the messages generated by the MessageGenerator
     */
    public ArrayList<String> syllable() {
        ArrayList<String> list = new ArrayList<>();
        try {
            LineNumberReader reader = new LineNumberReader(new FileReader(mFile));
            ArrayList<StringPair> content = DatabaseHandler.getContent(DatabaseHandler.SYLLABLE_TABLE_ID);
            for (String line; (line = reader.readLine()) != null; )
                for (String word : line.split("\\s"))
                    list.addAll(content.stream().filter(stringPair -> word.contains(stringPair.getFirst()))
                            .map(stringPair -> MessageGenerator.generate(reader.getLineNumber(), word,
                                    stringPair.getSecond(), MessageGenerator.WORD_SYLLABE_MISTAKE_KEY))
                            .collect(Collectors.toList()));
            reader.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            list = null;
        }
        return list;
    }

    /**
     * Looks for italic errors
     * @return an ArrayList of String which represents all the messages generated by the MessageGenerator
     */
    public ArrayList<String> italic() {
        ArrayList<String> list = new ArrayList<>();
        try {
            String[] punctuation = {"?", "!", "...", ",", ";", ":", "."};
            LineNumberReader reader = new LineNumberReader(new FileReader(mFile));
            for (String line; (line = reader.readLine()) != null; ) {
                String[] words = line.split("\\s");
                for (int i = 0; i < words.length; i++) {
                    if (words[i].startsWith("\uF005") && words[i + 1].startsWith("\uF005")
                            && words[i + 2].startsWith("\uF005") && words[i + 3].startsWith("\uF005"))
                        list.add(MessageGenerator.generate(reader.getLineNumber(),
                                MessageGenerator.ITALIC_THREE_WORDS_MISTAKE_KEY));
                }
                for (String p : punctuation)
                    if (line.contains("\uF005" + p))
                        list.add(MessageGenerator.generate(reader.getLineNumber(),
                                MessageGenerator.ITALIC_PUNCTUATION_MISTAKE_KEY));
            }
            reader.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            list = null;
        }
        return list;
    }

}